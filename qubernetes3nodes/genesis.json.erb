<%
def set_node_template_vars(values)
    @Node_UserIdent        = values["Node_UserIdent"]
    @Node_Key_Dir          = values["Key_Dir"]
    return
end

@Key_Dir_Base     = @config["quorum"]["Key_Dir_Base"]
@Geth_Network_Id  = @config["geth"]["network"]["id"]
@Accounts = ""
@Account_Allocs = ""
@Node_Index = 0

-%>

<% if @config["quorum"]["consensus"] == "raft" %>
{
"alloc": {
<%- @nodes.each_with_index do |node, indexNode|

    set_node_template_vars(node.values.first)
    @Keystores=Dir[@Key_Dir_Base + "/" + @Node_Key_Dir + "/UTC*"]
    puts(@Accounts)
    # Need to keep track of when the last account in the last node
    # is being writen, so as not to have a trailing ',' in the
    # genesis alloc json.
    # The keystore is assumed to be the generated keystore and will
    # start with UTC- and end with the account public key.
    @Keystores.each_with_index do |keystore, indexKey|
        #split on --
        # expects key file name to be in form: UTC--2019-06-07T20-35-11.255962000Z--b4d28f57063e3876b0a228280ee43fe4cf56a81c
        acct="0x" + keystore.split("--").last
    -%>    "<%= acct%>": {
       "balance": "1000000000000000000000000000"
    }<%- if (indexNode == @nodes.size - 1) and (indexKey == @Keystores.size - 1)
     else %>, <%- end %>
    <%-
        puts(acct)
    end
     -%>
<% end %>
  },
  "coinbase": "0x0000000000000000000000000000000000000000",
  "config": {
    "byzantiumBlock": 0,
    "constantinopleBlock": 0,
    "chainId": <%= @Geth_Network_Id %>,
    "eip150block": 0,
    "eip155block": 0,
    "eip150hash": "0x0000000000000000000000000000000000000000000000000000000000000000",
    "eip158block": 0,
    "isQuorum":true
  },
  "difficulty": "0x0",
  "extradata": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "gaslimit": "0xe0000000",
  "mixhash": "0x00000000000000000000000000000000000000647572616c65787365646c6578",
  "nonce": "0x0",
  "parenthash": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "timestamp": "0x00"
}
<% elsif @config["quorum"]["consensus"] == "istanbul" %>
{
"alloc": {
<%- @nodes.each_with_index do |node, indexNode|
    set_node_template_vars(node.values.first)
    @Keystores=Dir[@Key_Dir_Base + "/" + @Node_Key_Dir + "/UTC*"]
    puts(@Accounts)
    # Need to keep track of when the last account in the last node
    # is being writen, so as not to have a trailing ',' in the
    # genesis alloc json.
    # The keystore is assumed to be the generated keystore and will
    # start with UTC- and end with the account public key.
    @Keystores.each_with_index do |keystore, indexKey|
        #split on --
        # expects key file name to be in form: UTC--2019-06-07T20-35-11.255962000Z--b4d28f57063e3876b0a228280ee43fe4cf56a81c
        acct="0x" + keystore.split("--").last
    -%>    "<%= acct%>": {
       "balance": "1000000000000000000000000000"
    }<%- if (indexNode == @nodes.size - 1) and (indexKey == @Keystores.size - 1)
     else %>, <%- end %>
    <%-
        puts(acct)
    end
     -%>
<% end %>

  },
  "coinbase": "0x0000000000000000000000000000000000000000",
  "config": {
    "byzantiumBlock": 0,
    "constantinopleBlock": 0,
    "eip150Block": 0,
    "eip150Hash": "0x0000000000000000000000000000000000000000000000000000000000000000",
    "eip155Block": 0,
    "eip158Block": 0,
    "istanbul": {
      "epoch": 30000,
      "policy": 0
    },
    "isQuorum": true,
    "chainId": <%= @Geth_Network_Id %>
  },

  <%-
   # generate extraData from all nodekeys
   # create a istanbul validator config
   # see: https://github.com/jpmorganchase/istanbul-tools/blob/master/cmd/istanbul/example/config.toml
   # https://github.com/jpmorganchase/istanbul-tools
   # $> istanbul extra encode --config ./cmd/istanbul/example/config.toml
   #
   # Note: this requires istanbul-tools and nodejs to be installed on the host.
  %>
  <%-
  @IstanbulConfig = @Key_Dir_Base + "/istanbul-validator-config.toml"
  File.open(@IstanbulConfig, "w") do |f|
    f.puts ("vanity = \"0x00\" \nvalidators = [")
  end

 @nodes.each_with_index do |node, indexNode|
   set_node_template_vars(node.values.first)

   #puts(@Key_Dir_Base + "/" + @Node_Key_Dir + "/nodekey")
   File.open(@Key_Dir_Base + "/" + @Node_Key_Dir + "/nodekey", "r") do |f|
    f.each_line do |nodekey|
      nodeAcct=`node istanbul-helpers/privateKeyToAccount.js 0x#{nodekey}`
      puts("node account for Istanbul is: " + nodeAcct)
      nodeAcct=nodeAcct.strip
      File.open(@IstanbulConfig, "a") do |f|
        f.puts "\"" + nodeAcct + "\","
      end
    end
   end
  end
  File.open(@IstanbulConfig, "a") do |f|
     f.puts "]"
  end
   extraData=`istanbul extra encode --config #{@IstanbulConfig} | awk '{print $4}'`
   extraData=extraData.strip
   puts("Generated istanbul \"extraData\"=\"" + extraData + "\"")
   -%>
  "extraData": "<%= extraData%>",
  "gasLimit": "0x47b760",
  "difficulty": "0x1",
  "mixHash": "0x63746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365",
  "nonce": "0x0",
  "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "timestamp": "0x00"
}
<% else  %>
  ANOTHER CONSENSUS
<% end %>
