

apiVersion: v1
kind: Namespace
metadata:
  name: quorum-test
  labels:
    name: quorum-test

---
# kubectl create configmap game-config --from-file=configure-pod-container/dd1/key
apiVersion: v1
kind: ConfigMap
metadata:
  name: quorum-permissioned-config
  namespace: quorum-test
  labels:
    app: qubernetes
    name: quorum-permissioned-config
data:
  permissioned-nodes.json: |

    [
      "enode://ac6b1096ca56b9f6d004b779ae3728bf83f8e22453404cc3cef16a3d9b96608bc67c4b30db88e0a5a6c6390213f7acbe1153ff6d23ce57380104288ae19373ef@%QUORUM-NODE1_SERVICE_HOST%:21000?discport=0&raftport=50401",
      "enode://0ba6b9f606a43a95edc6247cdb1c1e105145817be7bcafd6b2c0ba15d58145f0dc1a194f70ba73cd6f4cdd6864edc7687f311254c7555cc32e4d45aeb1b80416@%QUORUM-NODE2_SERVICE_HOST%:21000?discport=0&raftport=50401",
      "enode://579f786d4e2830bbcc02815a27e8a9bacccc9605df4dc6f20bcc1a6eb391e7225fff7cb83e5b4ecd1f3a94d8b733803f2f66b7e871961e7b029e22c155c3a778@%QUORUM-NODE3_SERVICE_HOST%:21000?discport=0&raftport=50401",
      "enode://3d9ca5956b38557aba991e31cf510d4df641dce9cc26bfeb7de082f0c07abb6ede3a58410c8f249dabeecee4ad3979929ac4c7c496ad20b8cfdd061b7401b4f5@%QUORUM-NODE4_SERVICE_HOST%:21000?discport=0&raftport=50401",
      "enode://3701f007bfa4cb26512d7df18e6bbd202e8484a6e11d387af6e482b525fa25542d46ff9c99db87bd419b980c24a086117a397f6d8f88e74351b41693880ea0cb@%QUORUM-NODE5_SERVICE_HOST%:21000?discport=0&raftport=50401",
      "enode://eacaa74c4b0e7a9e12d2fe5fee6595eda841d6d992c35dbbcc50fcee4aa86dfbbdeff7dc7e72c2305d5a62257f82737a8cffc80474c15c611c037f52db1a3a7b@%QUORUM-NODE5_SERVICE_HOST%:21000?discport=0&raftport=50401",
      "enode://239c1f044a2b03b6c4713109af036b775c5418fe4ca63b04b1ce00124af00ddab7cc088fc46020cdc783b6207efe624551be4c06a994993d8d70f684688fb7cf@%QUORUM-NODE5_SERVICE_HOST%:21000?discport=0&raftport=50401"
    ]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: genesis-config
  namespace: quorum-test
  labels:
    app: qubernetes
    name: genesis-config
data:
  genesis-geth.json: |-
    {
        "alloc": {
          "0x0000000000000000000000000000000000000020": {
            "code": "0x606060405236156100c45760e060020a60003504631290948581146100c9578063284d163c146100f957806342169e4814610130578063488099a6146101395780634fe437d514610154578063559c390c1461015d57806368bb8bb61461025d57806372a571fc146102c857806386c1ff681461036957806398ba676d146103a0578063a7771ee31461040b578063adfaa72e14610433578063cf5289851461044e578063de8fa43114610457578063e814d1c71461046d578063f4ab9adf14610494575b610002565b610548600435600160a060020a03331660009081526003602052604090205460ff16156100c45760018190555b50565b610548600435600160a060020a03331660009081526005602052604090205460ff16156100c4576004546001141561055e57610002565b61045b60025481565b61054a60043560056020526000908152604090205460ff1681565b61045b60015481565b61045b60043560006000600060006000600050600186038154811015610002579080526002027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630192505b60018301548110156105d75760018301805484916000918490811015610002576000918252602080832090910154835282810193909352604091820181205485825292869052205410801561023257506001805490840180548591600091859081101561000257906000526020600020900160005054815260208101919091526040016000205410155b156102555760018301805482908110156100025760009182526020909120015491505b6001016101a8565b610548600435602435600160a060020a03331660009081526003602052604081205460ff16156100c4578054839010156105e45780548084038101808355908290829080158290116105df576002028160020283600052602060002091820191016105df919061066b565b610548600435600160a060020a03331660009081526005602052604090205460ff16156100c457600160a060020a0381166000908152604090205460ff1615156100f65760406000819020805460ff191660019081179091556004805490910190558051600160a060020a038316815290517f1a4ce6942f7aa91856332e618fc90159f13a340611a308f5d7327ba0707e56859181900360200190a16100f6565b610548600435600160a060020a03331660009081526003602052604090205460ff16156100c4576002546001141561071457610002565b61045b600435602435600060006000600050600185038154811015610002579080526002027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630181509050806001016000508381548110156100025750825250602090200154919050565b61054a600435600160a060020a03811660009081526003602052604090205460ff165b919050565b61054a60043560036020526000908152604090205460ff1681565b61045b60045481565b6000545b60408051918252519081900360200190f35b61054a600435600160a060020a03811660009081526005602052604090205460ff1661042e565b610548600435600160a060020a03331660009081526003602052604090205460ff16156100c457600160a060020a03811660009081526003602052604090205460ff1615156100f65760406000818120600160a060020a0384169182905260036020908152815460ff1916600190811790925560028054909201909155825191825291517f0ad2eca75347acd5160276fe4b5dad46987e4ff4af9e574195e3e9bc15d7e0ff929181900390910190a16100f6565b005b604080519115158252519081900360200190f35b600160a060020a03811660009081526005602052604090205460ff16156100f65760406000819020805460ff19169055600480546000190190558051600160a060020a038316815290517f8cee3054364d6799f1c8962580ad61273d9d38ca1ff26516bd1ad23c099a60229181900360200190a16100f6565b509392505050565b505050505b60008054600019850190811015610002578382526002027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563016020819052604082205490925014156106b8578060010160005080548060010182818154818355818115116106a5578183600052602060002091820191016106a5919061068d565b50506002015b808211156106a157600181018054600080835591825260208220610665918101905b808211156106a1576000815560010161068d565b5090565b5050506000928352506020909120018290555b600082815260208281526040918290208054600101905581514381529081018490528151600160a060020a033316927f3d03ba7f4b5227cdb385f2610906e5bcee147171603ec40005b30915ad20e258928290030190a2505050565b600160a060020a03811660009081526003602052604090205460ff16156100f65760406000819020805460ff19169055600280546000190190558051600160a060020a038316815290517f183393fc5cffbfc7d03d623966b85f76b9430f42d3aada2ac3f3deabc78899e89181900360200190a16100f656",
            "storage": {
              "0x0000000000000000000000000000000000000000000000000000000000000001": "0x02",
    
              "0x0000000000000000000000000000000000000000000000000000000000000002": "0x04",
              "0x29ecdbdf95c7f6ceec92d6150c697aa14abeb0f8595dd58d808842ea237d8494": "0x01",
              "0x6aa118c6537572d8b515a9f9154be55a3377a8de7991cd23bf6e5ceb368688e3": "0x01",
              "0x50793743212c6f01d326957d7069005b912f8215f10c7536be6b10782c6c44cd": "0x01",
              "0x38f6c908c5cc7ca668cec2f476abe61b4dbb1df20f0ad8e07ef5dbf6a2f1ffd4": "0x01",
    
              "0x0000000000000000000000000000000000000000000000000000000000000004": "0x02",
              "0xaca3b76ed4968740c3180dd7fa37f4aa229a2c758a848f53920e9ccb4c4bb74e": "0x01",
              "0xd188ba2dc293670542c1befaf7678b0859e5354a0727d1188b2afb6f47fe24d1": "0x01"
            },
            "balance": "1000000000000000000000000000"
          },
          "0xed9d02e382b34818e88b88a309c7fe71e65f419d": {
            "balance": "1000000000000000000000000000"
          },
          "0xca843569e3427144cead5e4d5999a3d0ccf92b8e": {
            "balance": "1000000000000000000000000000"
          },
          "0x0fbdc686b912d7722dc86510934589e0aaf3b55a": {
            "balance": "1000000000000000000000000000"
          },
          "0x9186eb3d20cbd1f5f992a950d808c4495153abd5": {
            "balance": "1000000000000000000000000000"
          },
          "0x0638e1574728b6d862dd5d3a3e0942c3be47d996": {
            "balance": "1000000000000000000000000000"
          }
        },
        "coinbase": "0x0000000000000000000000000000000000000000",
        "config": {
          "byzantiumBlock": 1,
          "eip150Block": 2,
          "eip150Hash": "0x0000000000000000000000000000000000000000000000000000000000000000",
          "eip155Block": 3,
          "eip158Block": 3,
          "istanbul": {
            "epoch": 30000,
            "policy": 0
          },
          "isQuorum": true,
          "chainId": 10
        },
        "extraData": "0x0000000000000000000000000000000000000000000000000000000000000000f897f893946571d97f340c8495b661a823f2c2145ca47d63c2948157d4437104e3b8df4451a85f7b2438ef6699ff94b131288f355bc27090e542ae0be213c20350b76794b912de287f9b047b4228436e94b5b78e3ee1617194d8dba507e85f116b1f7e231ca8525fc9008a696694e36cbeb565b061217930767886474e3cde903ac594f512a992f3fb749857d758ffda1330e590fa915e80c0",
        "gasLimit": "0x47b760",
        "difficulty": "0x1",
        "mixHash": "0x63746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365",
        "nonce": "0x0",
        "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "timestamp": "0x00"
      }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tessera-config
  namespace: quorum-test
  labels:
    app: qubernetes
    name: tessera-config
data:
  tessera-config.json.tmpl: |-
    
    
    
    
    {
        "useWhiteList": false,
        "jdbc": {
            "username": "sa",
            "password": "",
            "url": "jdbc:h2:/etc/quorum/qdata/tm/db;MODE=Oracle;TRACE_LEVEL_SYSTEM_OUT=0",
            "autoCreateTables": true
        },
        "server": {
            "port": 9001,
            "hostName": "http://%THIS_SERVICE_HOST%",
            "bindingAddress": "http://0.0.0.0:9001",
            "sslConfig": {
                "tls": "OFF",
                "generateKeyStoreIfNotExisted": true,
                "serverKeyStore": "/etc/quorum/qdata/tm/server-keystore",
                "serverKeyStorePassword": "quorum",
                "serverTrustStore": "/etc/quorum/qdata/tm/server-truststore",
                "serverTrustStorePassword": "quorum",
                "serverTrustMode": "TOFU",
                "knownClientsFile": "/etc/quorum/qdata/tm/knownClients",
                "clientKeyStore": "/etc/quorum/qdata/tm/client-keystore",
                "clientKeyStorePassword": "quorum",
                "clientTrustStore": "/etc/quorum/qdata/tm/client-truststore",
                "clientTrustStorePassword": "quorum",
                "clientTrustMode": "TOFU",
                "knownServersFile": "/etc/quorum/qdata/tm/knownServers"
            }
        },
        "peer": [
    
             {
               "url": "http://%QUORUM-NODE1_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%QUORUM-NODE2_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%QUORUM-NODE3_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%QUORUM-NODE4_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%QUORUM-NODE5_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%QUORUM-NODE6_SERVICE_HOST%:9001"
             },
    
    
             {
               "url": "http://%QUORUM-NODE7_SERVICE_HOST%:9001"
             }
    
        ],
        "keys": {
            "passwords": [],
            "keyData": [
                {
                    "privateKeyPath": "/etc/quorum/qdata/tm/tm.key",
                    "publicKeyPath": "/etc/quorum/qdata/tm/tm.pub"
                }
            ]
        },
        "alwaysSendTo": [],
        "unixSocketFile": "/etc/quorum/qdata/tm/tm.ipc"
    }
    

  tessera-config-enhanced.json.tmpl: |-
    
    
    
    {
      "useWhiteList": false,
      "jdbc": {
        "username": "sa",
        "password": "",
        "url": "jdbc:h2:/etc/quorum/qdata/tm/db;MODE=Oracle;TRACE_LEVEL_SYSTEM_OUT=0",
        "autoCreateTables": true
      },
      "serverConfigs":[
      {
        "app":"ThirdParty",
        "enabled": true,
        "serverSocket":{
          "type":"INET",
          "port": 9080,
          "hostName": "http://%THIS_SERVICE_HOST%"
        },
        "communicationType" : "REST"
      },
      {
        "app":"Q2T",
        "enabled": true,
        "serverSocket":{
          "type":"UNIX",
          "path":"/etc/quorum/qdata/tm/tm.ipc"
        },
        "communicationType" : "UNIX_SOCKET"
      },
      {
        "app":"P2P",
        "enabled": true,
        "serverSocket":{
          "type":"INET",
          "port": 9001,
          "hostName": "http://%THIS_SERVICE_HOST%",
          "bindingAddress": "http://0.0.0.0:9001"
        },
        "sslConfig": {
          "tls": "OFF",
          "generateKeyStoreIfNotExisted": true,
          "serverKeyStore": "/etc/quorum/qdata/tm/server-keystore",
          "serverKeyStorePassword": "quorum",
          "serverTrustStore": "/etc/quorum/qdata/tm/server-truststore",
          "serverTrustStorePassword": "quorum",
          "serverTrustMode": "TOFU",
          "knownClientsFile": "/etc/quorum/qdata/tm/knownClients",
          "clientKeyStore": "/etc/quorum/qdata/tm/client-keystore",
          "clientKeyStorePassword": "quorum",
          "clientTrustStore": "/etc/quorum/qdata/tm/client-truststore",
          "clientTrustStorePassword": "quorum",
          "clientTrustMode": "TOFU",
          "knownServersFile": "/etc/quorum/qdata/tm/knownServers"
        },
        "communicationType" : "REST"
      }
      ],
    
        "peer": [
    
         {
               "url": "http://%QUORUM-NODE1_SERVICE_HOST%:9001"
             },
    
    
         {
               "url": "http://%QUORUM-NODE2_SERVICE_HOST%:9001"
             },
    
    
         {
               "url": "http://%QUORUM-NODE3_SERVICE_HOST%:9001"
             },
    
    
         {
               "url": "http://%QUORUM-NODE4_SERVICE_HOST%:9001"
             },
    
    
         {
               "url": "http://%QUORUM-NODE5_SERVICE_HOST%:9001"
             },
    
    
         {
               "url": "http://%QUORUM-NODE6_SERVICE_HOST%:9001"
             },
    
    
         {
               "url": "http://%QUORUM-NODE7_SERVICE_HOST%:9001"
             }
    
        ],
        "keys": {
             "passwords": [],
             "keyData": [
                {
                    "config": %THIS_PRIV_KEY%,
                    "publicKey": "%THIS_PUB_KEY%"
                }
              ]
         },
        "alwaysSendTo": []
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: contracts-config
  namespace: quorum-test
  labels:
    app: qubernetes
    name: contracts-config
data:
  runscript.sh: |-
    #!/bin/ash
    PRIVATE_CONFIG=$TM_HOME/tm.ipc geth --exec "loadScript(\"$1\")" attach ipc:$QUORUM_HOME/dd/geth.ipc
  private_contract.js: |-
    a = eth.accounts[0]
    web3.eth.defaultAccount = a;
    
    // abi and bytecode generated from simplestorage.sol:
    // > solcjs --bin --abi simplestorage.sol
    var abi = [{"constant":true,"inputs":[],"name":"storedData","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"set","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"get","outputs":[{"name":"retVal","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[{"name":"initVal","type":"uint256"}],"payable":false,"type":"constructor"}];
    
    var bytecode = "0x6060604052341561000f57600080fd5b604051602080610149833981016040528080519060200190919050505b806000819055505b505b610104806100456000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632a1afcd914605157806360fe47b11460775780636d4ce63c146097575b600080fd5b3415605b57600080fd5b606160bd565b6040518082815260200191505060405180910390f35b3415608157600080fd5b6095600480803590602001909190505060c3565b005b341560a157600080fd5b60a760ce565b6040518082815260200191505060405180910390f35b60005481565b806000819055505b50565b6000805490505b905600a165627a7a72305820d5851baab720bba574474de3d09dbeaabc674a15f4dd93b974908476542c23f00029";
    
    var simpleContract = web3.eth.contract(abi);
    var simple = simpleContract.new(42, {from:web3.eth.accounts[0], data: bytecode, gas: 0x47b760, privateFor: ["ROAZBWtSacxXQrOe3FGAqJDyJjFePR5ce4TSIzmJ0Bc="]}, function(e, contract) {
    	if (e) {
    		console.log("err creating contract", e);
    	} else {
    		if (!contract.address) {
    			console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
    		} else {
    			console.log("Contract mined! Address: " + contract.address);
    			console.log(contract);
    		}
    	}
    });
  public_contract.js: |-
    a = eth.accounts[0]
    web3.eth.defaultAccount = a;
    
    // abi and bytecode generated from simplestorage.sol:
    // > solcjs --bin --abi simplestorage.sol
    var abi = [{"constant":true,"inputs":[],"name":"storedData","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"set","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"get","outputs":[{"name":"retVal","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[{"name":"initVal","type":"uint256"}],"payable":false,"type":"constructor"}];
    
    var bytecode = "0x6060604052341561000f57600080fd5b604051602080610149833981016040528080519060200190919050505b806000819055505b505b610104806100456000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632a1afcd914605157806360fe47b11460775780636d4ce63c146097575b600080fd5b3415605b57600080fd5b606160bd565b6040518082815260200191505060405180910390f35b3415608157600080fd5b6095600480803590602001909190505060c3565b005b341560a157600080fd5b60a760ce565b6040518082815260200191505060405180910390f35b60005481565b806000819055505b50565b6000805490505b905600a165627a7a72305820d5851baab720bba574474de3d09dbeaabc674a15f4dd93b974908476542c23f00029";
    
    var simpleContract = web3.eth.contract(abi);
    var simple = simpleContract.new(42, {from:web3.eth.accounts[0], data: bytecode, gas: 0x47b760}, function(e, contract) {
            if (e) {
                    console.log("err creating contract", e);
            } else {
                    if (!contract.address) {
                            console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
                    } else {
                            console.log("Contract mined! Address: " + contract.address);
                            console.log(contract);
                    }
            }
    });
